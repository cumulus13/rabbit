#!/usr/bin/env python

import socket
import time
import subprocess
from datetime import datetime
import argparse
import sys

def get_date():
    return datetime.strftime(datetime.now(), '%Y/%m/%d %H:%M:%S.%f')

def is_service_running(service_name):
    """Check if a service is running using `pgrep`."""
    try:
        subprocess.run(["pgrep", "-f", service_name], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        return False

def is_port_open(host, port):
    """Check if a port is open."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(1)  # Timeout after 1 second
        try:
            s.connect((host, port))
            return True
        except (socket.timeout, ConnectionRefusedError):
            return False

def check_rabbitmq(keep = False, sleep = 5):
    """Check if RabbitMQ is running and if ports are open."""
    while True:
        # rabbitmq_running = is_service_running("rabbitmq-server")
        rabbitmq_running = is_service_running("beam.smp")
        port_5672_open = is_port_open("localhost", 5672)
        port_15672_open = is_port_open("localhost", 15672)

        print("\n--- RabbitMQ Status Check ---")
        print(f"RabbitMQ Server Running: {'Yes' if rabbitmq_running else 'No'}")
        print(f"Port 5672 (AMQP): {'Open' if port_5672_open else 'Closed'}")
        print(f"Port 15672 (Management): {'Open' if port_15672_open else 'Closed'}")

        if rabbitmq_running and port_5672_open and port_15672_open:
            print(f"{get_date()} - RabbitMQ is running, and ports are open.")
            if not keep: break
        else:
            print(f"{get_date()} - RabbitMQ is not fully operational. Retrying...")
            
        # Wait for a few seconds before checking again
        time.sleep(sleep)

def usage():
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', '--monitor', help = 'keep monitor', action = 'store_true')
    parser.add_argument('-t', '--time', action = 'store', help = 'sleep time (second)', type = int)
    if len(sys.argv) == 1:
        parser.print_help()
        check_rabbitmq()
    else:
        args = parser.parse_args()
        check_rabbitmq(args.monitor, args.time)

if __name__ == "__main__":
    usage()
